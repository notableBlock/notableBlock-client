name: CI/CD 파이프라인 (AWS, S3 CloudFront, E2E, Unit)

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout CLIENT
        uses: actions/checkout@v4

      - name: Checkout SERVER
        uses: actions/checkout@v4
        with:
          repository: notableBlock/notableBlock-server
          token: ${{ secrets.SERVER_REPO_TOKEN }}
          path: server
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Create CLIENT .env
        run: |
          echo "VITE_SERVER_URL=http://127.0.0.1:8080" >> .env
          echo "VITE_GOOGLE_CLIENT_ID=${{ secrets.VITE_GOOGLE_CLIENT_ID }}" >> .env
          echo "E2E_KEY=${{ secrets.E2E_KEY }}" >> .env
          echo "CLIENT_URL=http://127.0.0.1:5173" >> .env

      - name: Install CLIENT dependencies
        run: npm ci

      - name: CLIENT Build
        run: npm run build

      - name: Create SERVER .env
        working-directory: server
        run: |
          echo "PORT=8080" >> .env
          echo "USE_S3=false" >> .env
          echo "NODE_ENV=test" >> .env
          echo "CLIENT_URL=http://127.0.0.1:5173" >> .env
          echo "MONGO_ATLAS_URI=${{ secrets.MONGO_ATLAS_URI }}" >> .env
          echo "E2E_KEY=${{ secrets.E2E_KEY }}" >> .env
          echo "E2E_ACCESS_TOKEN=${{ secrets.E2E_ACCESS_TOKEN }}" >> .env
          echo "E2E_REFRESH_TOKEN=${{ secrets.E2E_REFRESH_TOKEN }}" >> .env
          echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_REGION=ap-northeast-2" >> .env

      - name: Install SERVER dependencies
        working-directory: server
        run: npm ci

      - name: Start SERVER
        working-directory: server
        run: |
          npm run start:test &
          npx wait-on tcp:127.0.0.1:8080

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Unit Tests with Coverage
        run: npm run test:unit:coverage

      - name: Run E2E Tests
        continue-on-error: true
        run: npm run test:e2e

      - name: Upload Playwright traces
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: test-results/**/*.zip
          retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Create .env file
        run: |
          echo "VITE_SERVER_URL=${{ secrets.VITE_SERVER_URL }}" >> .env
          echo "VITE_GOOGLE_CLIENT_ID=${{ secrets.VITE_GOOGLE_CLIENT_ID }}" >> .env
          echo "E2E_KEY=${{ secrets.E2E_KEY }}" >> .env
          echo "CLIENT_URL=${{ secrets.CLIENT_URL }}" >> .env

      - name: Install dependencies
        run: npm ci

      - name: Build Project
        run: npm run build

      - name: Upload to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "ap-northeast-2"
          SOURCE_DIR: "dist"

      - name: Invalidate CloudFront
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: "/*"
          AWS_REGION: "ap-northeast-2"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
